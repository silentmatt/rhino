js> Object.isExtensible;
function isExtensible() { [native code for Object.isExtensible, arity=1] }
js> Object.isExtensible() === undefined;
true
js> [undefined, null, true, 1, "hello"].forEach(function(val) {
  >   try {
  >     Object.isExtensible(val);
  >     print("Object.isExtensible("+val+") should have thrown a TypeError");
  >   } catch (e if e instanceof TypeError) {
  >     // this was expected
  >   } catch (e) {
  >     print("Object.isExtensible("+val+") should have thrown a TypeError, but instead threw "+e)
  >   }
  > })

js> Object.isExtensible({});
true

js> Object.preventExtensions;
function preventExtensions() { [native code for Object.preventExtensions, arity=1] }
js> Object.preventExtensions() === undefined;
true
js> [undefined, null, true, 1, "hello"].forEach(function(val) {
  >   try {
  >     Object.preventExtensions(val);
  >     print("Object.preventExtensions("+val+") should have thrown a TypeError");
  >   } catch (e if e instanceof TypeError) {
  >     // this was expected
  >   } catch (e) {
  >     print("Object.preventExtensions("+val+") should have thrown a TypeError, but instead threw "+e)
  >   }
  > })
js> var x = {};
js> Object.isExtensible(x);
true
js> var y = Object.preventExtensions(x);
js> y === x;
true
js> Object.isExtensible(x);
false
