js> Object.getOwnPropertyDescriptor;
function getOwnPropertyDescriptor() { [native code for Object.getOwnPropertyDescriptor, arity=2] }
js> Object.getOwnPropertyDescriptor() === undefined;
true
js> [undefined, null, true, 1, "hello"].forEach(function(val) {
  >   try {
  >     Object.getOwnPropertyDescriptor(val, 'p');
  >     print("Object.getOwnPropertyDescriptor("+val+", 'p') should have thrown a TypeError");
  >   } catch (e if e instanceof TypeError) {
  >     // expected this
  >   } catch (e) {
  >     print("Object.getOwnPropertyDescriptor("+val+", 'p') should have thrown a TypeError, but instead threw "+e)
  >   }
  > })

js> Object.getOwnPropertyDescriptor({}, 'p') === undefined;
true

js> var desc = Object.getOwnPropertyDescriptor({p:1}, 'p');
js> desc.value
1
js> desc.writable
true
js> desc.enumerable
true
js> desc.configurable
true

js> var desc = Object.getOwnPropertyDescriptor({ get p() {}, set p() {} }, 'p');
js> desc.value === undefined;
true
js> desc.writable === undefined;
true
js> desc.get.toSource()
(function () {})
js> desc.set.toSource()
(function () {})
js> desc.enumerable
true
js> desc.configurable
true
